version: "3.8"

services:
    setup:
        image: docker.elastic.co/elasticsearch/elasticsearch:${DOCKER_STACK_VERSION}
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
        user: "0"
        command: >
            bash -c ' if [ x${DOCKER_ELASTIC_PASS} == x ]; then
                echo "Set the DOCKER_ELASTIC_PASS environment variable in the .env file";
                exit 1;
            fi; if [ ! -f certs/ca.zip ]; then
                echo "Creating CA";
                bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
                unzip config/certs/ca.zip -d config/certs;
            fi; if [ ! -f certs/certs.zip ]; then
                echo "Creating certs";
                echo -ne \
                "instances:\n"\
                "  - name: elastic\n"\
                "    dns:\n"\
                "      - elastic\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                > config/certs/instances.yml;
                bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
                unzip config/certs/certs.zip -d config/certs;
            fi; echo "Setting file permissions" chown -R root:root config/certs; find . -type d -exec chmod 750 \{\} \;; find . -type f -exec chmod 640 \{\} \;; echo "Waiting for Elasticsearch availability"; until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done; echo "All done!"; '
        healthcheck:
            test: [ "CMD-SHELL", "[ -f config/certs/elastic/elastic.crt ]" ]
            interval: 1s
            timeout: 5s
            retries: 120
    elasticsearch:
        container_name: elasticsearch
        depends_on:
            setup:
                condition: service_healthy
        image: docker.elastic.co/elasticsearch/elasticsearch:${DOCKER_STACK_VERSION}
        environment:
            - cluster.name=docker-cluster
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
            - ELASTIC_PASSWORD=${DOCKER_ELASTIC_PASS}
            - xpack.security.enabled=true
            - discovery.type=single-node
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.key=certs/elastic/elastic.key
            - xpack.security.http.ssl.certificate=certs/elastic/elastic.crt
            - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.http.ssl.verification_mode=certificate
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.key=certs/elastic/elastic.key
            - xpack.security.transport.ssl.certificate=certs/elastic/elastic.crt
            - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.verification_mode=certificate
            - xpack.LICENSE.self_generated.type=${DOCKER_LICENSE}
        mem_limit: ${DOCKER_MEM_LIMIT}
        volumes: 
            - certs:/usr/share/elasticsearch/config/certs
            - elasticdata:/usr/share/elasticsearch/data
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
            memlock:
                soft: -1
                hard: -1
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"
                ]
            interval: 10s
            timeout: 10s
            retries: 120
        ports:
            - ${DOCKER_ELASTIC_PORT}:9200
    redis:
        image: redis
        restart: always
        ports:
            - "6379:6379"
        volumes:
            - cache:/data
    back:
        image: api
        depends_on:
            - redis
            - elasticsearch
        build:
            context: ./
            dockerfile: Dockerfile
        ports:
            - "3000:3000"
        restart: on-failure
volumes:
    cache:
        driver: local
    certs:
        driver: local
    elasticdata:
        driver: local
